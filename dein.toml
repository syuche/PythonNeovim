[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-n> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'vim-scripts/wombat256.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_source = '''
let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
let g:deoplete#omni_patterns = {}
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_i = 1
on_ft = 'python'

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python']

[[plugins]]
repo = 'sjl/badwolf'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'badwolf'
    let g:airline#extensions#virtualenv#enabled = 1
    set laststatus=2
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap [figitive] <Nop>
    nnoremap <Leader>g [figitive]
    nnoremap <silent> [figitive]s :<C-u>Gstatus<CR>
    nnoremap <silent> [figitive]d :<C-u>Gdiff<CR>
    nnoremap <silent> [figitive]b :<C-u>Gblame<CR>
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
   " エラー行に表示するマーク
   let g:ale_sign_error = '⨉'
   let g:ale_sign_warning = '⚠'
   " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
   let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
   " エラー表示の列を常時表示
   let g:ale_sign_column_always = 1

   " ファイルを開いたときにlint実行
   let g:ale_lint_on_enter = 1
   " ファイルを保存したときにlint実行
   let g:ale_lint_on_save = 1
   " 編集中のlintはしない
   let g:ale_lint_on_text_changed = 'never'

   " lint結果をロケーションリストとQuickFixには表示しない
   " 出てると結構うざいしQuickFixを書き換えられるのは困る
   let g:ale_set_loclist = 0
   let g:ale_set_quickfix = 0
   let g:ale_open_list = 0
   let g:ale_keep_list_window_open = 0

   " 有効にするlinter
   let g:ale_linters = {
   \   'python': ['flake8','mypy'],
   \}

   " ALE用プレフィックス
   nmap [ale] <Nop>
   map <C-k> [ale]
   " エラー行にジャンプ
   nmap <silent> [ale]<C-P> <Plug>(ale_previous)
   nmap <silent> [ale]<C-N> <Plug>(ale_next)
'''

